x = runif(1,min=0,max=1)
if (x<0.5){
x=-1
}
else{
x=1
}
return(x)
}
mean_list <- vector(mode="numeric", length=0)
for(j in 1:4){
mean <- 0
len <-0
for(i in 1:n_sizes[j]){
len <- len+1
temp <- create_sample()
mean <- (mean+temp)
}
mean_list[j]<-mean/len
}
log_list <- c(1,2,3,4)
for(i in 1:4){
mean_list[i]<-(mean_list[i]-0)
}
plot(unlist(log_list),unlist(mean_list),ylab=expression(paste(log[10](n))),xlab=expression(paste(bar(X)[n]^(1)-mu)),main=expression(paste(log[10](n),"  v.s.  ",bar(X)[n]^(1)-mu)))
#1c
#instantiate sizes
sizes<-c(10,1000,10000)
#instantiate histogram mean value vectors
hist1<- vector(mode="numeric", length=10000)
hist2<- vector(mode="numeric", length=10000)
hist3<- vector(mode="numeric", length=10000)
#generate hist values
for(i in 1:10000){
hist1[i]<- sqrt(sizes[1])*sample10[i]
hist2[i]<- sqrt(sizes[2])*sample1000[i]
hist3[i]<- sqrt(sizes[3])*sample10000[i]
}
#plot histograms
hist(hist1)
hist(hist2)
hist(hist3)
#plot qq charts with qqline and norm
qqnorm(hist1, pch = 1, frame = FALSE)
qqline(hist1, col = "steelblue", lwd = 2)
qqnorm(hist2, pch = 1, frame = FALSE)
qqline(hist2, col = "steelblue", lwd = 2)
qqnorm(hist3, pch = 1, frame = FALSE)
qqline(hist3, col = "steelblue", lwd = 2)
x<- rnorm(10000, min=0,max=1)
x<- rnorm(10000, mean = 0, sd = 1)
print(x)
#1a
n_sizes<-c(10,100,1000,10000)
create_sample <- function(){
x = runif(1,min=0,max=1)
if (x<0.5){
x=-1
}
else{
x=1
}
return(x)
}
mean_list <- vector(mode="numeric", length=0)
for(j in 1:4){
mean <- 0
len <-0
for(i in 1:n_sizes[j]){
len <- len+1
temp <- create_sample()
mean <- (mean+temp)
}
mean_list[j]<-mean/len
}
log_list <- c(1,2,3,4)
for(i in 1:4){
mean_list[i]<-(mean_list[i]-0)
}
plot(unlist(log_list),unlist(mean_list),ylab=expression(paste(bar(X)[n]^(1)-mu)),xlab=expression(paste(log[10](n))),main=expression(paste(log[10](n),"  v.s.  ",bar(X)[n]^(1)-mu)))
#1a
n_sizes<-c(10,100,1000,10000)
create_sample <- function(){
x = runif(1,min=0,max=1)
if (x<0.5){
x=-1
}
else{
x=1
}
return(x)
}
mean_list <- vector(mode="numeric", length=0)
for(j in 1:4){
mean <- 0
len <-0
for(i in 1:n_sizes[j]){
len <- len+1
temp <- create_sample()
mean <- (mean+temp)
}
mean_list[j]<-mean/len
}
log_list <- c(1,2,3,4)
for(i in 1:4){
mean_list[i]<-(mean_list[i]-0)
}
plot(unlist(log_list),unlist(mean_list),ylab=expression(paste(bar(X)[n]^(1)-mu)),xlab=expression(paste(log[10](n))),main=expression(paste(log[10](n),"  v.s.  ",bar(X)[n]^(1)-mu)))
#1a
n_sizes<-c(10,100,1000,10000)
create_sample <- function(){
x = runif(1,min=0,max=1)
if (x<0.5){
x=-1
}
else{
x=1
}
return(x)
}
mean_list <- vector(mode="numeric", length=0)
for(j in 1:4){
mean <- 0
len <-0
for(i in 1:n_sizes[j]){
len <- len+1
temp <- create_sample()
mean <- (mean+temp)
}
mean_list[j]<-mean/len
}
log_list <- c(1,2,3,4)
for(i in 1:4){
mean_list[i]<-(mean_list[i]-0)
}
plot(unlist(log_list),unlist(mean_list),ylab=expression(paste(bar(X)[n]^(1)-mu)),xlab=expression(paste(log[10](n))),main=expression(paste(log[10](n),"  v.s.  ",bar(X)[n]^(1)-mu)))
print(eps1)
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))))
plot(unlist(log_list),unlist(eps2),xlab=expression(paste(log[10](n))))
plot(unlist(log_list),unlist(eps3),xlab=expression(paste(log[10](n))))
print(eps1)
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))),main="epsilon=.5")
plot(unlist(log_list),unlist(eps2),xlab=expression(paste(log[10](n))),main="epsilon=.1")
plot(unlist(log_list),unlist(eps3),xlab=expression(paste(log[10](n))),main="epsilon=.05")
#1c
#instantiate sizes
sizes<-c(10,1000,10000)
#instantiate histogram mean value vectors
hist1<- vector(mode="numeric", length=10000)
hist2<- vector(mode="numeric", length=10000)
hist3<- vector(mode="numeric", length=10000)
#generate hist values
for(i in 1:10000){
hist1[i]<- sqrt(sizes[1])*sample10[i]
hist2[i]<- sqrt(sizes[2])*sample1000[i]
hist3[i]<- sqrt(sizes[3])*sample10000[i]
}
#plot histograms
hist(hist1,main="n=10")
hist(hist2,main="n=1000")
hist(hist3,main="n=10000")
#plot qq charts with qqline and norm
qqnorm(hist1, pch = 1, frame = FALSE,main="n=10")
qqline(hist1, col = "steelblue", lwd = 2)
qqnorm(hist2, pch = 1, frame = FALSE,main="n=1000")
qqline(hist2, col = "steelblue", lwd = 2)
qqnorm(hist3, pch = 1, frame = FALSE,main="n=10000")
qqline(hist3, col = "steelblue", lwd = 2)
print(eps1)
plot(unlist(log_list),unlist(eps1))
print(eps1)
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))))
#1d
#create norm means
create_means_norms<- function(n){
x<- matrix(rnorm(10000*n,mean = 0, sd = 1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create mean sets of the 4 different sample sizes
sample10 <- create_means_norm(10)
#1d
#create norm means
create_means_norm<- function(n){
x<- matrix(rnorm(10000*n,mean = 0, sd = 1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create mean sets of the 4 different sample sizes
sample10 <- create_means_norm(10)
sample100 <- create_means_norm(100)
sample1000 <- create_means_norm(1000)
sample10000 <- create_means_norm(10000)
#1d
#create norm means
create_means_norm<- function(n){
x<- matrix(rnorm(10000*n,mean = 0, sd = 1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create mean sets of the 4 different sample sizes
sample10 <- create_means_norm(10)
sample100 <- create_means_norm(100)
sample1000 <- create_means_norm(1000)
sample10000 <- create_means_norm(10000)
#create list of log base 10 of 10,100,1000,10000
log_list <- c(1,2,3,4)
#create list of epsilon
eps_list <- c(0.001)
#instantiate vector to contain identity sum for 3 vals of epsilon
eps1 <- vector(mode="numeric", length=4)
#calculate identity vals for 4 sample sizes
for(i in 1:10000){
eps1[1]<-eps1[1]+I_func(sample10[i],eps_list[1])
eps1[2]<-eps1[2]+I_func(sample100[i],eps_list[1])
eps1[3]<-eps1[3]+I_func(sample1000[i],eps_list[1])
eps1[4]<-eps1[4]+I_func(sample10000[i],eps_list[1])
}
#divide by the number of samples and multiply by sqrt n
eps1<- eps1/10000
eps1[1]<-sqrt(10)*eps1[1]
eps1[2]<-sqrt(100)*eps1[2]
eps1[3]<-sqrt(1000)*eps1[3]
eps1[4]<-sqrt(10000)*eps1[4]
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))))
#1d
#create norm means
create_means_norm<- function(n){
x<- matrix(rnorm(10000*n,mean = 0, sd = 1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create mean sets of the 4 different sample sizes
sample10 <- create_means_norm(10)
sample100 <- create_means_norm(100)
sample1000 <- create_means_norm(1000)
sample10000 <- create_means_norm(10000)
#1d
#create norm means
create_means_norm<- function(n){
x<- matrix(rnorm(10000*n,mean = 0, sd = 1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create mean sets of the 4 different sample sizes
sample10 <- create_means_norm(10)
sample100 <- create_means_norm(100)
sample1000 <- create_means_norm(1000)
sample10000 <- create_means_norm(10000)
#create list of log base 10 of 10,100,1000,10000
log_list <- c(1,2,3,4)
#create list of epsilon
eps_list <- c(0.001)
#instantiate vector to contain identity sum for 3 vals of epsilon
eps1 <- vector(mode="numeric", length=4)
#calculate identity vals for 4 sample sizes
for(i in 1:10000){
eps1[1]<-eps1[1]+I_func(sample10[i],eps_list[1])
eps1[2]<-eps1[2]+I_func(sample100[i],eps_list[1])
eps1[3]<-eps1[3]+I_func(sample1000[i],eps_list[1])
eps1[4]<-eps1[4]+I_func(sample10000[i],eps_list[1])
}
#divide by the number of samples and multiply by sqrt n
eps1<- eps1/10000
eps1[1]<-sqrt(10)*eps1[1]
eps1[2]<-sqrt(100)*eps1[2]
eps1[3]<-sqrt(1000)*eps1[3]
eps1[4]<-sqrt(10000)*eps1[4]
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))))
#1d
#create x means
create_means_norm<- function(n){
x<- matrix(runif(10000*n,min=0,max=1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create y vals
y<-rnorm(10000,mean=0,sd=1)
#create mean sets of the 4 different sample sizes
sample10 <- create_means(10)
sample100 <- create_means(100)
sample1000 <- create_means(1000)
sample10000 <- create_means(10000)
#create list of log base 10 of 10,100,1000,10000
log_list <- c(1,2,3,4)
#create list of epsilon
eps_list <- c(0.001)
#instantiate vector to contain identity sum for 3 vals of epsilon
eps1 <- vector(mode="numeric", length=4)
#calculate identity vals for 4 sample sizes
for(i in 1:10000){
eps1[1]<-eps1[1]+abs((sample10[i])-y[i])
eps1[2]<-eps1[2]+abs((sample100[i])-y[i])
eps1[3]<-eps1[3]+abs((sample1000[i])-y[i])
eps1[4]<-eps1[4]+abs((sample10000[i])-y[i])
}
#divide by the number of samples and multiply by sqrt n and take identity function
eps1<- eps1/10000
eps1[1]<-sqrt(10)*eps1[1]
eps1[2]<-sqrt(100)*eps1[2]
eps1[3]<-sqrt(1000)*eps1[3]
eps1[4]<-sqrt(10000)*eps1[4]
eps1[1]<-I_func(eps1[1],.001)
eps1[2]<-I_func(eps1[2],.001)
eps1[3]<-I_func(eps1[3],.001)
eps1[4]<-I_func(eps1[4],.001)
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))))
print(eps1)
print(y)
#1d
#create x means
create_means_norm<- function(n){
x<- matrix(runif(10000*n,min=0,max=1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create y vals
y<-rnorm(10000,mean=0,sd=1)
#create mean sets of the 4 different sample sizes
sample10 <- create_means(10)
sample100 <- create_means(100)
sample1000 <- create_means(1000)
sample10000 <- create_means(10000)
#create list of log base 10 of 10,100,1000,10000
log_list <- c(1,2,3,4)
#create list of epsilon
eps_list <- c(0.001)
#instantiate vector to contain identity sum for 3 vals of epsilon
eps1 <- vector(mode="numeric", length=4)
#calculate identity vals for 4 sample sizes
for(i in 1:10000){
eps1[1]<-eps1[1]+abs(sqrt(10)*(sample10[i])-y[i])
eps1[2]<-eps1[2]+abs(sqrt(100)*(sample100[i])-y[i])
eps1[3]<-eps1[3]+abs(sqrt(1000)*(sample1000[i])-y[i])
eps1[4]<-eps1[4]+abs(sqrt(10000)*(sample10000[i])-y[i])
}
#divide by the number of samples and multiply by sqrt n and take identity function
eps1<- eps1/10000
eps1[1]<-I_func(eps1[1],.001)
eps1[2]<-I_func(eps1[2],.001)
eps1[3]<-I_func(eps1[3],.001)
eps1[4]<-I_func(eps1[4],.001)
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))))
print(eps1)
print(sample10)
print(sample100)
print(sample1000)
print(sample10000)
#1d
#create x means
create_means_norm<- function(n){
x<- matrix(runif(10000*n,min=0,max=1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create y vals
y1<-rnorm(10000,mean=0,sd=1)
y2<-rnorm(10000,mean=0,sd=1)
y3<-rnorm(10000,mean=0,sd=1)
y4<-rnorm(10000,mean=0,sd=1)
#create mean sets of the 4 different sample sizes
sample10 <- create_means(10)
sample100 <- create_means(100)
sample1000 <- create_means(1000)
sample10000 <- create_means(10000)
#create list of log base 10 of 10,100,1000,10000
log_list <- c(1,2,3,4)
#create list of epsilon
eps_list <- c(0.001)
#instantiate vector to contain identity sum for 3 vals of epsilon
eps1 <- vector(mode="numeric", length=4)
#calculate identity vals for 4 sample sizes
for(i in 1:10000){
eps1[1]<-eps1[1]+abs(sqrt(10)*(sample10[i])-y1[i])
eps1[2]<-eps1[2]+abs(sqrt(100)*(sample100[i])-y2[i])
eps1[3]<-eps1[3]+abs(sqrt(1000)*(sample1000[i])-y3[i])
eps1[4]<-eps1[4]+abs(sqrt(10000)*(sample10000[i])-y4[i])
}
#divide by the number of samples and multiply by sqrt n and take identity function
eps1<- eps1/10000
eps1[1]<-I_func(eps1[1],.001)
eps1[2]<-I_func(eps1[2],.001)
eps1[3]<-I_func(eps1[3],.001)
eps1[4]<-I_func(eps1[4],.001)
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))))
print(eps1)
#1d
#create x means
create_means_norm<- function(n){
x<- matrix(runif(10000*n,min=0,max=1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create y vals
y1<-rnorm(10000,mean=0,sd=1)
y2<-rnorm(10000,mean=0,sd=1)
y3<-rnorm(10000,mean=0,sd=1)
y4<-rnorm(10000,mean=0,sd=1)
#create mean sets of the 4 different sample sizes
sample10 <- create_means(10)
sample100 <- create_means(100)
sample1000 <- create_means(1000)
sample10000 <- create_means(10000)
#create list of log base 10 of 10,100,1000,10000
log_list <- c(1,2,3,4)
#create list of epsilon
eps_list <- c(0.001)
#instantiate vector to contain identity sum for 3 vals of epsilon
eps1 <- vector(mode="numeric", length=4)
#calculate identity vals for 4 sample sizes
for(i in 1:10000){
eps1[1]<-eps1[1]+abs((sample10[i])-y1[i])
eps1[2]<-eps1[2]+abs((sample100[i])-y2[i])
eps1[3]<-eps1[3]+abs((sample1000[i])-y3[i])
eps1[4]<-eps1[4]+abs((sample10000[i])-y4[i])
}
#divide by the number of samples and multiply by sqrt n and take identity function
eps1<- eps1/10000
eps1[1]<-I_func(eps1[1],.001)
eps1[2]<-I_func(eps1[2],.001)
eps1[3]<-I_func(eps1[3],.001)
eps1[4]<-I_func(eps1[4],.001)
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))))
print(eps1)
#1d
#create x means
create_means_norm<- function(n){
x<- matrix(runif(10000*n,min=0,max=1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create y vals
y1<-rnorm(10000,mean=0,sd=1)
y2<-rnorm(10000,mean=0,sd=1)
y3<-rnorm(10000,mean=0,sd=1)
y4<-rnorm(10000,mean=0,sd=1)
#create mean sets of the 4 different sample sizes
sample10 <- create_means(10)
sample100 <- create_means(100)
sample1000 <- create_means(1000)
sample10000 <- create_means(10000)
#create list of log base 10 of 10,100,1000,10000
log_list <- c(1,2,3,4)
#create list of epsilon
eps_list <- c(0.001)
#instantiate vector to contain identity sum for 3 vals of epsilon
eps1 <- vector(mode="numeric", length=4)
#calculate identity vals for 4 sample sizes
for(i in 1:10000){
eps1[1]<-eps1[1]+I_func(abs((sample10[i])-y1[i]))
eps1[2]<-eps1[2]+I_func(abs((sample100[i])-y2[i]))
eps1[3]<-eps1[3]+I_func(abs((sample1000[i])-y3[i]))
eps1[4]<-eps1[4]+I_func(abs((sample10000[i])-y4[i]))
}
#1d
#create x means
create_means_norm<- function(n){
x<- matrix(runif(10000*n,min=0,max=1),ncol = n)
x<- ifelse(x<.5,-1,1)
x<- rowMeans(x)
return(x)
}
#create y vals
y1<-rnorm(10000,mean=0,sd=1)
y2<-rnorm(10000,mean=0,sd=1)
y3<-rnorm(10000,mean=0,sd=1)
y4<-rnorm(10000,mean=0,sd=1)
#create mean sets of the 4 different sample sizes
sample10 <- create_means(10)
sample100 <- create_means(100)
sample1000 <- create_means(1000)
sample10000 <- create_means(10000)
#create list of log base 10 of 10,100,1000,10000
log_list <- c(1,2,3,4)
#create list of epsilon
eps_list <- c(0.001)
#instantiate vector to contain identity sum for 3 vals of epsilon
eps1 <- vector(mode="numeric", length=4)
#calculate identity vals for 4 sample sizes
for(i in 1:10000){
eps1[1]<-eps1[1]+I_func(abs((sample10[i])-y1[i]),.001)
eps1[2]<-eps1[2]+I_func(abs((sample100[i])-y2[i]),.001)
eps1[3]<-eps1[3]+I_func(abs((sample1000[i])-y3[i]),.001)
eps1[4]<-eps1[4]+I_func(abs((sample10000[i])-y4[i]),.001)
}
#divide by the number of samples and multiply by sqrt n and take identity function
eps1<- eps1/10000
plot(unlist(log_list),unlist(eps1),xlab=expression(paste(log[10](n))))
load(iPinYou.RData)
load(file="iPinYou.RData")
ls()
print(dataTest)
COPY<-data.frame(dataTest)
print(COPY)
COPY<-data.frame(dataTest)
print(COPY)
tracemen(COPY) == tracemem(dataTest)
COPY<-data.frame(dataTest)
tracemen(COPY) == tracemem(dataTest)
COPY<-data.frame(dataTest)
tracemem(COPY) == tracemem(dataTest)
install.packages('caret', dependencies = TRUE)
